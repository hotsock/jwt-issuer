// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	kms "github.com/aws/aws-sdk-go-v2/service/kms"

	mock "github.com/stretchr/testify/mock"
)

// KMSAPI is an autogenerated mock type for the KMSAPI type
type KMSAPI struct {
	mock.Mock
}

// GetPublicKey provides a mock function with given fields: _a0, _a1, _a2
func (_m *KMSAPI) GetPublicKey(_a0 context.Context, _a1 *kms.GetPublicKeyInput, _a2 ...func(*kms.Options)) (*kms.GetPublicKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *kms.GetPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kms.GetPublicKeyInput, ...func(*kms.Options)) (*kms.GetPublicKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kms.GetPublicKeyInput, ...func(*kms.Options)) *kms.GetPublicKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kms.GetPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kms.GetPublicKeyInput, ...func(*kms.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: _a0, _a1, _a2
func (_m *KMSAPI) Sign(_a0 context.Context, _a1 *kms.SignInput, _a2 ...func(*kms.Options)) (*kms.SignOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *kms.SignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kms.SignInput, ...func(*kms.Options)) (*kms.SignOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kms.SignInput, ...func(*kms.Options)) *kms.SignOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kms.SignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kms.SignInput, ...func(*kms.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKMSAPI creates a new instance of KMSAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKMSAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *KMSAPI {
	mock := &KMSAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
